[{"content":"前言 一不做二不休，准备部署一个云相册代替羸弱的系统云相册。找来找去还是锁定在了PhotoPrism和Immich之间。最终我选择了PhotoPrism，原因在于Immich不支持从本地的文件夹名称创建相册。\n部署前的准备 本地服务器一台（安装好Docker和Docker Compose） 云服务器一台（用于内网穿透） 安装PhotoPrism 创建目录，用于存放docker-compose.yml文件，PhotoPrism配置文件和图库\n1 2 3 4 sudo mkdir docker-compose/photoprism sudo mkdir /disk1/Photo/import # 传入这个相册的图片会被识别，分类和整理到originals sudo mkdir /disk1/Photo/originals # 已经分类好的相册放在这个目录下 sudo mkdir docker-compose/photoprism/storage # 配置文件和缓存存放的地方 下载PhotoPrism的docker-compose模板,并编辑\n1 2 3 cd docker-compose/photoprism wget https://dl.photoprism.app/docker/docker-compose.yml sudo vim docker-compose.yml 注意修改以下项目\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 services: photoprism: image: photoprism/photoprism:latest # 指定photoprism的镜像版本 ports: - \u0026#34;2342:2342\u0026#34; # 修改端口 environment: PHOTOPRISM_ADMIN_USER: \u0026#34;admin\u0026#34; # 修改管理员用户名 PHOTOPRISM_ADMIN_PASSWORD: \u0026#34;insecure\u0026#34; # 修改管理员密码，建议使用复杂密码 PHOTOPRISM_AUTH_MODE: \u0026#34;password\u0026#34; # 身份验证模式，不用修改 PHOTOPRISM_SITE_URL: \u0026#34;http://localhost:2342/\u0026#34; # 注意修改端口号，也可以直接注释掉 # 由于不开放数据库，所以数据库部分的密码不用修改也没关系 volumes: - \u0026#34;/disk1/Photo/originals:/photoprism/originals\u0026#34; # 修改成刚刚创建的目录 - \u0026#34;/disk1/Photo/import:/photoprism/import\u0026#34; # 修改成刚刚创建的目录 启动服务\n1 sudo docker compose up -d 设置语言 在浏览器输入主机的ip加端口打开PhotoPrism的登录页面，，输入刚刚设置的账号密码登录，颜值还是蛮高的\n点击设置选项，将页面设置为中文\n导入图片到PhotoPrism 导入现有图片 现在我的相册空空如也（废话），需要将现有的相片导入到PhotoPrism。简单说一下我的需求，我有两种图片需要储存到PhotoPrism，一种是我存的大量的meme图和插画，这些图片我希望在PhotoPrism创建梗图和插画两个相册储存。另一种需要储存到PhotoPrism的图片是我拍摄的相片，我希望PhotoPrism能识别其中的元数据自动帮我分类存储。这就要用到前面创建的import和originals两个目录。简单的说这两个目录的不同在于\noriginals: 已经分类好的相册放在这个目录下 import: 传入这个相册的图片会被识别，分类和整理到originals 所以只要将相片传到相应的文件夹即可\n上传完成后打开PhotoPrism的web端，点击资料库-索引-开始，索引刚刚传入originals的图片\n索引完成后点击文件夹，勾选刚刚索引的文件夹，右下角选择添加到相册\n随后回到资料库，点击导入，将import目录下的照片导入\n图片同步 之后的照片同步可以使用photosync来实现，这也是官方推荐的方式。不过photosync的界面略显古老，相关的功能也需要收费，遂放弃。最后选择了FolderSync进行同步。 简单提一嘴，可以通过samba服务利用smb协议来同步文件，也可以使用webdav的方式。Photoprism也自带了简单的webdav服务。不过FolderSync要使用Photoprism自带的webdav需要先配置Photoprism的https\n参考 Docker Compose - PhotoPrism\nPhotoprism教程：建立你的私人云相册 | 微言码道\nWebDAV - PhotoPrism\nFolders - PhotoPrism\n","date":"2024-06-18T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2photoprism%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%BA%91%E7%9B%B8%E5%86%8C/cover_hu5459c0360c2b0cb7a147d2df0eb350ca_1493264_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2photoprism%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%BA%91%E7%9B%B8%E5%86%8C/","title":"使用Docker部署PhotoPrism打造个人云相册"},{"content":"前言 厌烦了虚拟机的性能损失和不稳定，思来想去整了个n1盒子作旁路由，决定把PVE中的虚拟机迁移到物理机上。找了一圈方案貌似Clonezilla最简单安全，所以决定试试。\n以下操作有危险，请保存好你的数据！！！\n制作Clonezilla启动盘 从这里下载Clonezilla的镜像文件，注意选择iso镜像\n使用烧录软件将U盘制作成启动盘，这里以balenaEtcher为例，使用Fusion等等也是可以的（注意烧录完成后如果弹出格式化硬盘，务必取消）\n备份系统 将u盘插入装有PVE虚拟机的主机上，登录PVE管理界面，点击需要备份的虚拟机 - 硬件 - 添加 - USB设备，将刚刚插上的硬盘直通给虚拟机\n点击选项 - 引导顺序，将刚刚直通的usb启动，并拖到第一位，重启虚拟机\n进入Clonezilla后，使用上下键选择语言\n键盘配置保持默认\n选择使用再生龙\n选择第一项，保存到镜像\n我要把镜像保存到主机的机械硬盘中，所以直接选第一项，如果有别的需求可以按需选择（前提是已经将硬盘直通给虚拟机）\n检查要储存备份的硬盘是否有正常显示，若正常使用Ctrl+C退出此页面\n选择要储存备份的硬盘\n选择跳过检查\n选择完目录后，点击选择Done\n选择第一项初学模式\n选择储存本机硬盘为镜像文件\n输入镜像名称，默认即可\n选择要备份的硬盘，一般sda是系统盘，按空格键选择\n选择压缩方式，默认的第二项即可\n跳过检查\n跳过检查\n选择不加密，当操作完成后选择关机\n恢复系统 重启主机，进入Bios，将U盘设为引导顺序的第一位\n进入Clonezilla，前面的选项照旧，这里的硬盘选择之前存储镜像的硬盘\n目录选择之前存储镜像的目录\n选择初学模式\n选择还原镜像文件到本机硬盘\n选择刚刚保存的镜像\n选择部署系统的硬盘\n选第一个模式\n选择重启\n等待程序部署和修复引导完成，成功进入系统\n结尾 这样系统的迁移就完成了，这样的部署方式有没有不良影响还未知，不过内网传输文件终于可以跑满带宽了，泪目\n","date":"2024-06-13T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8clonezilla%E5%B0%86pve%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%81%E7%A7%BB%E5%88%B0%E7%89%A9%E7%90%86%E6%9C%BA/cover_hu5459c0360c2b0cb7a147d2df0eb350ca_694219_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8clonezilla%E5%B0%86pve%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%81%E7%A7%BB%E5%88%B0%E7%89%A9%E7%90%86%E6%9C%BA/","title":"使用Clonezilla将PVE虚拟机迁移到物理机"},{"content":"Bitwarden密码管理器 Bitwarden是一款开源跨平台的密码管理器，你可以选择自己部署密码库，而不需要经过第三方的服务器。总之为了摆脱恼人的Edge，首先要部署代替的密码管理器和迁移密码。\n部署前的准备 一台装有docker及docker-compose，nginx的服务器 一个可以使用的域名 在这里贴上官方提供的配置要求:\nMinimum Recommended Processor x64, 1.4GHz x64, 2GHz dual core Memory 2GB RAM 2GB RAM Storage 12GB 25GB Docker Version Engine 26+ and Compose Engine 26+ and Compose 创建一个专门用于Bitwarden的用户 根据Bitwarden官方的建议，创建一个专门用于Bitwarden的用户，以便隔绝Bitwarden与其他应用程序\n1 2 3 4 5 6 7 sudo adduser bitwarden # 使用Ubantu的话，这一步就需要输入密码 sudo passwd bitwarden # 建议使用强密码并妥善保管 sudo groupadd docker # 如果安装了docker一般情况下docker用户组已经存在 sudo usermod -aG docker bitwarden sudo mkdir /opt/bitwarden sudo chmod -R 700 /opt/bitwarden sudo chown -R bitwarden:bitwarden /opt/bitwarden 部署Bitwarden 切换到bitwarden用户\n1 su bitwarden 下载官方提供的安装脚本\n1 curl -Lso bitwarden.sh \u0026#34;https://func.bitwarden.com/api/dl/?app=self-host\u0026amp;platform=linux\u0026#34; \u0026amp;\u0026amp; chmod 700 bitwarden.sh 在安装前需要先到Bitwarden官网获取安装id和密钥，需要用到一个邮箱地址，随后运行脚本执行安装命令，根据提示填写即可\n1 ./bitwarden.sh install 安装完成后需要修改配置文件和环境变量文件，首先修改config.yml\n1 vim ./bwdata/config.yml 主要修改以下两个设置：\n1 2 3 4 5 6 7 # Docker compose file port mapping for HTTP. Leave empty to remove the port mapping. # Learn more: https://docs.docker.com/compose/compose-file/#ports http_port: 30080 # 修改成80意外的端口防止冲突 # # Docker compose file port mapping for HTTPS. Leave empty to remove the port mapping. # Learn more: https://docs.docker.com/compose/compose-file/#ports https_port: # 禁用https 随后修改global.override.env\n1 vim ./bwdata/env/global.override.env 1 2 3 4 5 6 7 8 globalSettings__mail__replyToEmail=no-reply@bitwarden.ratmomo.tech # 修改成你的邮箱以获得smtp服务 globalSettings__mail__smtp__host=REPLACE globalSettings__mail__smtp__port=587 globalSettings__mail__smtp__ssl=false globalSettings__mail__smtp__username=REPLACE globalSettings__mail__smtp__password=REPLACE globalSettings__disableUserRegistration=false # 个人使用的话，在创建完账户后建议设置成true adminSettings__admins= # 修改成你的邮箱 outlook的用户可以在此找到相关配置\n修改完成后运行以下命令：\n1 2 ./bitwarden.sh rebuild ./bitwarden.sh start 完成后可以使用docker ps验证是否正常运行\n设置反代 个人使用强烈建议选择Nginx proxy manager代替Nginx，以下以npm为例演示：\n登录npm的WEB管理页面，选择Add Proxy Host\n在Domain Names输入你的域名，例如：bitwarden.example.com。在Forward Hostname/IP输入服务器的IP地址，例如：192.168.1.2。端口填入刚刚设置的端口，建议打开下方的三个选项\n点击SSL，选择Request a new SSL Certificate，建议打开Force SSl和HTTP/2 Support两个选项，再在下方填入你的邮箱，勾选同意协议以获取SSL证书\n到这一步基本上已经可以通过刚刚设置的域名访问自己的BitWarden页面了,随后注册账户即可使用密码库\n番外篇：导入Edge/Chrome密码 在Edge/Chrome的密码管理界面选择导出\n在Bitwarden的管理页面中选择工具菜单下的导入数据，再在文件格式菜单中选择Chrome(CSV)，上传刚刚导出的csv文件，点击导入数据按钮即可\n参考 Linux Standard Deployment | Bitwarden Help Center\nbitwarden部署和使用记录 – 萌萌哒赫萝的小站\n如何搭建一个私人的bitwarden密码管理工具服务端(保姆级教程) | Sola\u0026rsquo;s Blog\nImport Data from Google Chrome | Bitwarden Help Center\n","date":"2024-06-11T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85bitwarden/cover_hu9c8c653ca541d463556575e8448b0d08_2912832_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85bitwarden/","title":"使用Docker部署安装Bitwarden"},{"content":"前言 为了摆脱PC用网线直连主机来操作pve的窘境，我们在PVE中首当其冲应该安装的部分就是软路由，主流的软路由有iKuai和OpenWrt等，OpenWrt又有着许多的发行版，这里我们用iStoreOS为例，在PVE中安装软路由\n部署前的准备 一台成功安装PVE的主机，可以参考这篇文章 为软路由准备虚拟机 在PVE管理页面的右上角选择创建虚拟机，名称任意,VM ID可以修改但不能冲突，这里使用默认，下一步\n软路由的安装比较特殊，这里选择不使用任何介质\n由于没有使用UEFI的固件，这里保持默认，下一步\n不需要创建磁盘，直接点击删除，下一步\n核心数和插槽根据你的平台决定，软路由性能需求不高，可以保持默认，或者也可以设置到与你的平台情况一致，PVE会动态分配资源，无需担心类别可以保持默认，也可以选择host（据说性能更好）\n内存分配随意，这里保持默认\n网络保持默认即可，模型使用半虚拟化据说性能更佳，但可能不兼容某些老设备\n安装iStoreOS固件 在KoolCenter 固件下载服务器中下载自己平台对应的固件，由于我们使用的是PVE虚拟机，这里就下载x86_64的固件，下载完成后解压\n依次点击local - ISO镜像 - 上传，将iStoreOS的镜像上传，注意复制一下你的文件名，等会需要使用\n选择宿主机的Shell功能，执行命令，这里的iso文件名是你即刚刚上传时的文件名\n1 qm importdisk 100 /var/lib/vz/template/iso/istoreos-22.03.6-2024051012-x86-64-squashfs-combined.img local-lvm 选择软路由虚拟机，选择硬件，双击未使用的磁盘，点击添加，可以扩容一下磁盘，但不是必要的\n注意到这里已经有了第一个网卡，点击左上角的添加 - 网络设备，将我们桥接的第二个网卡添加进去\n选择软路由虚拟机，选择选项 - 引导顺序 -编辑，将刚刚添加的磁盘启动，并拖到最上方\n配置iStoreOS作为旁路由 此时启动软路由虚拟机，点击控制台，等待引导结束，系统启动\n按下回车键，进入命令行，输入命令\n1 quickstart 使用上下键选择选项2 这里输入之前为虚拟机预留的ip，我这里是192.168.99.2，子网掩码输入255.255.255.0，使用上下键选择quit离开，重启虚拟机\n此时便可以在浏览器中输入192.168.99.2进入iStoreOS的管理界面，默认的密码是password\n虽然出现危险的可能性不大，但还是建议现在系统 - 管理权 - 路由器密码处先修改密码\n点击网络 - 接口 - 设备 - br-lan的配置，在网桥端口项将所有的网卡加入桥接\n因为我将软路由作为旁路由且不负责dhcp，所以不需要再添加接口，点击网络向导，选择配置为旁路由，在手动配置中输入为192.168.99.2，网关为主路由地址，关闭DHCPv4服务\n点击网络 - 接口 - lan - 编辑 - DHCP服务器 - 常规设置，选择忽略此接口\n此时拔掉PC与软路由相连的网线，将作为主机的一个网口与主路由器的lan口连接，软路由能正常联网即表明配置成功，PC上的以太网设置也可以还原了\n结尾 软路由的设置到这里就结束了\n","date":"2024-06-10T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E5%9C%A8pve%E4%B8%AD%E9%85%8D%E7%BD%AE%E8%BD%AF%E8%B7%AF%E7%94%B1/cover_hu5459c0360c2b0cb7a147d2df0eb350ca_3254561_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E5%9C%A8pve%E4%B8%AD%E9%85%8D%E7%BD%AE%E8%BD%AF%E8%B7%AF%E7%94%B1/","title":"在PVE中配置软路由"},{"content":"部署前的准备 U盘一个 PC一台，提前安装好rufus或balenaEtcher等软件用于制作启动盘 我用于搭建All in One的配置如下：\n主板 B365 CPU i3-8100 内存 DDR4 16Gx2 硬盘 致钛PC005 512G 西数HC510 西数HC510 电源 海韵SSP-250SUB 安装PVE 从PVE官网下载页面下载安装镜像，这里我选择的是最新的 8.2 版本\n将你的u盘插入PC，使用启动盘制作软件制作启动盘，这里以balenaEtcher为例： 打开balenaEtcher，选择从文件烧录，再选择刚刚下载的镜像\n选择你插入的U盘\n再点击立即烧录即可，注意不要点击可能弹窗的格式化U盘\n将U盘从PC弹出，插入到将要安装PVE的主机，随后通过U盘引导开机（可能需要进入BIOS进行设置），这里直接回车执行第一项安装命令\n在协议界面选择I aggree后，选择安装的硬盘，根据你的情况选择硬盘，这里我选择的是512G的那块固态，next\n区域设置界面，在Country选项中选择China，next\n密码设置界面，输入你的密码，建议设置的复杂一点，next\n网络设置界面，选择一个网卡作为pve的管理入口，这里我有两个网卡我选择了第一个，Hostname可以任意设置一个，IP Address如果你不想把软路由设置成主路由，就把地址设置到和你的主路由同一个网段，例如我想把软路由作为旁路由，所以将ip设置为192.168.99.3，Gateway则设置为主路由的地址192.168.99.1。如果准备将软路由作为主路由，则ip可以在局域网网段下任意设置，但注意不要设置成之后为软路由预留的地址，不过之后的教程只会介绍前一个方案。DNS Server保持默认即可，next，Install\n连接PVE 点击reboot，关机完成重启前拔出启动盘，让机器通过硬盘引导，随后直接将PC的网口连接到All in One主机刚刚选择作为管理口的网口，以防错误我们主动将PC和主机设置同一网段，如果是Windows 11的话，打开设置 - 网络和Internet - 高级网络设置 - 以太网（注意是你PC的网卡对应的以太网）- Internet 协议版本 4（TCP/IPv4）- 属性，将PC的ip地址设置成同一个网段，这里用的是192.168.99.99，子网掩码保持默认，默认网关设置成为软路由预设的网关，点击确定即可\n随后打开PC的浏览器，输入192.168.99.3:8006，如果提示不是私密连接则点高级再点击继续前往\n打开PVE管理页面后，在用户名输入root，密码即为安装时设置的密码，最后一个选项可以设置语言\n配置网卡 作为旁路由的软路由其实只需要一个网口，但是既然我们有两个网卡也不能浪费。在PVE中点击你的宿主机，选择系统 - 网络。可以看到其中一个网卡PVE已经自动为我们完成了桥接\n点击创建 - Linux Bridge，在桥接端口中输入第二个网卡的名称，点击创建\n硬件直通的预先准备 需要提前主板bios中开启虚拟化功能，不同的平台设置不同。开启虚拟化后，点击宿主机的Shell功能，修改grub配置\n1 vim /etc/default/grub # 没有vim则apt安装，或者使用vi 将GRUB_CMDLINE_LINUX_DEFAULT项修改为\n1 GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on iommu=pt\u0026#34; 修改完成后更新grup，并重启\n1 2 update-grub reboot 结尾 至此，PVE已经可以正常使用了，关于换源等PVE优化并非必要，网上有很多其他教程可以参考\n","date":"2024-06-07T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E5%9C%A8%E7%89%A9%E7%90%86%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85pve/cover_hu5459c0360c2b0cb7a147d2df0eb350ca_1084121_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E5%9C%A8%E7%89%A9%E7%90%86%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85pve/","title":"在物理机上安装PVE"},{"content":"配置环境 Windows PC一台且已经安装有Git Github账号一个 创建博客仓库 在github主页点击New按钮为博客创建一个仓库 在Repository name项填写仓库名，注意必须使用\u0026lt;user\u0026gt;.github.io的格式，\u0026lt;user\u0026gt;为Github用户名。可选在Description填写仓库描述，注意需要勾选Initialize this repository with a README选项。 安装Hugo 版本较新的Windows推荐直接使用winget的方式安装Hugo，其他操作系统的安装方法可以查阅官方文档：Hugo官方文档 1 winget install Hugo.Hugo.Extended 如果使用Chocolatey命令如下：\n1 choco install hugo-extended 安装完成后查看hugo版本验证安装是否成功 1 hugo version 在本地创建博客项目文件夹 创建一个文件夹用于存放博客项目并在终端中打开 使用hugo创建网站项目 1 hugo new site ratmomo-blog # 可以替换成任意你想要的名字 安装主题 找到一款你喜欢的主题，可以使用Hugo社区提供的主题，也可以使用你从其他地方找的心仪主题 根据主题的页面或者主题提供的文档安装主题，例如本博客使用的主题Stack。鉴于我们已经使用了Git创建网站文件，我们使用git submodule命令将主题作为子模块使用 1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 将themes文件夹中安装好的主题中的exampelSite文件夹中的配置文件hugo.yaml(也有可能是hugo.toml之类的)复制到你的项目文件夹中，再将archetypes中的文件复制到你的项目文件夹的archetypes中，根据配置文件的注释和主题的官方文档修改配置，如果使用的是我推荐的Stack，需要注意以下配置： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 baseurl: https://example.com # 需要修改成你的网站\u0026lt;user\u0026gt;.github.io title: Example Site # 需要修改成你想在标签页显示的名称 DefaultContentLanguage: en # 如果是中文博客注意修改成zh-cn，以添加i18n支持 hasCJKLanguage: false # 如果是DefaultContentLanguage修改成zh-cn，修改为true sidebar: emoji: 🍥 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. avatar: enabled: true local: true src: img/avatar.png # 头像的位置在assets/img/avatar.png article: math: false # 使用数学公式需要打开 创建文章 使用Hugo创建文章，生成的Markdowen文件的元数据中image可以指定文章封面，draft表示文章是否属于草稿，草稿文件不会被发布，hidden表示文章是否会被隐藏 1 hugo new post/test/index.md 完成后可以使用以下命令预览： 1 hugo server -D 发布文章 直接执行hugo命令可以为你的博客项目在public文件夹中生成静态的html文件，发布博客实际上只需要向仓库推送public文件夹中的内容\n1 2 hugo cd .\\public\\ 将public文件夹初始化为git仓库，并将远程仓库地址设置为Github Pages的仓库地址\n1 2 3 git init -b main git remote add origin 你的远程仓库地址 git add . 随后便可以推通过Git推送文章了\n1 2 git commit -m \u0026#34;First commit\u0026#34; git push -u origin main 番外篇：自定义你的站点 自定义网站图标 在配置文件hugo.yaml中可以指定网站的图标\n1 2 params: favicon: /favicon.ico # 实际上的位置是static/favicon.ico 将你的ico图标文件放置在你的项目文件夹中的static文件夹并命名为favicon即可\n修改你的主题 这里以为stack主题的article页面添加网易云音乐的外链为例：在themes\\hugo-theme-stack\\layouts\\partials\\article\\components文件夹中新建一个文件music.html写入网易云音乐的外链模板\n1 2 3 4 \u0026lt;!-- .Params.musicid可以获取Markdown文件元数据中的musicid这个属性，这样我们便可以在markdown中指定我们要插入文章的音乐 --\u0026gt; \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=100% height=86 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id={{ .Params.musicid }}\u0026amp;auto=0\u0026amp;height=66\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; 我希望网易云音乐的外链在页面中位于文章中的标题之下，文章内容之上，所以需要编辑content.html的内容\n1 2 3 4 5 6 7 8 9 \u0026lt;section class=\u0026#34;article-content\u0026#34;\u0026gt; \u0026lt;!-- Refer to https://discourse.gohugo.io/t/responsive-tables-in-markdown/10639/5 --\u0026gt; {{ $wrappedTable := printf \u0026#34;\u0026lt;div class=\\\u0026#34;table-wrapper\\\u0026#34;\u0026gt;${1}\u0026lt;/div\u0026gt;\u0026#34; }} \u0026lt;!-- 下面三行是增加的内容 --\u0026gt; {{ if .Params.musicid }} {{ partial \u0026#34;article/components/music\u0026#34; . }} {{ end }} {{ .Content | replaceRE \u0026#34;(\u0026lt;table\u0026gt;(?:.|\\n)+?\u0026lt;/table\u0026gt;)\u0026#34; $wrappedTable | safeHTML }} \u0026lt;/section\u0026gt; 打开项目目录下的archetypes中的default.md文件，在元数据中添加一行musicid属性\n1 musicid: 这样就完成了主题的修改，不过由于我们安装主题使用的是Git submodule的方法，因此本地的修改实际上不能在Github Pages产生效果，我们需要一些额外的工作。首先打开你安装的主题的Github仓库并fork\n修改我们submodule的远程仓库地址，打开项目目录下的.gitmodules，将submodule的url修改成远程仓库的地址，随后执行命令更新远程仓库地址\n1 git submodule sync 随后将我们的修改推送到远程仓库即可\n番外篇：使用GitHub Action自动发布博客 创建一个新的仓库，用于存放整个项目，作为博客源仓库\n使用git remote set-url命令更改远程仓库地址\n1 2 3 git remote -v git remote set-url origin git@github.com:ratmomo/blog-source.git git remote -v 在本地仓库中创建文件.github\\workflows\\gh-pages.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 name: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;0.127.0\u0026#39; # 注意修改成你的hugo版本，以防兼容性错误 extended: true # 是否启用hugo extended - name: Build run: hugo --minify working-directory: ./ratmomo-blog # 注意修改成你使用hugo创建的项目名称 - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: PERSONAL_TOKEN: ${{ secrets.ACTION_TOKEN }} PUBLISH_DIR: ./ratmomo-blog/public # 注意修改成你使用hugo创建的项目名称 EXTERNAL_REPOSITORY: ratmomo/ratmomo.github.io # 你的Github Pages远程仓库名 # PUBLISH_BRANCH: master 如果不想推送到gh-pages分支，可以添加这一行 在Github Profile页面下Developer setting - Personal access tokens中创建一个tokens，注意勾选repo和workflow权限\n在博客源仓库的Settings-Secrets and variables-Actions-Repository secrets中添加一个ACTION_TOKEN内容为刚刚创建的tokens\n接下来直接push本地的修改到远程博客源仓库，Github Action会为我们完成生成静态页面和推送到GitHub Pages仓库的任务\n如果之前配置的推送目标时gh-pages分支，注意将GitHub Pages仓库的Sittings - Pages - Build and deployment - Branch修改为gh-pages\n参考 Hugo Documentation | Hugo\nSite-wide settings | Stack\n如何用 GitHub Pages + Hugo 搭建个人博客 · 小绵尾巴\nHugo 博客引入 Giscus 评论系统 -\nHugo + GitHub Action，搭建你的博客自动发布系统 · Pseudoyu\n","date":"2024-06-06T00:00:00Z","image":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8-hugo--github-pages-%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cover_huc004bd00789154600b0b30e83cc400c7_2055315_120x120_fill_q75_box_smart1.jpg","permalink":"https://ratmomo.github.io/p/2024/06/%E4%BD%BF%E7%94%A8-hugo--github-pages-%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"使用 Hugo + Github Pages 部署个人博客"}]